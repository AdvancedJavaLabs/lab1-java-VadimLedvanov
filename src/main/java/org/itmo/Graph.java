package org.itmo;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;

class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    AtomicIntegerArray parallelBFS(int startVertex) {
        AtomicIntegerArray visited = new AtomicIntegerArray(V);
        visited.compareAndSet(startVertex, 0, 1);

        int threadCount = Runtime.getRuntime().availableProcessors();
        ExecutorService executorService = Executors.newFixedThreadPool(threadCount);

        List<Integer> startLevel = new ArrayList<>(1);
        startLevel.add(startVertex);

        try {
            while (!startLevel.isEmpty()) {
                List<Integer> thisLevel = startLevel;

                AtomicInteger vIndex = new AtomicInteger(0);

                List<List<Integer>> buckets = new ArrayList<>(threadCount);
                for (int t = 0; t < threadCount; t++) buckets.add(new ArrayList<>());

                CountDownLatch latch = new CountDownLatch(threadCount);
                for (int t = 0; t < threadCount; t++) {
                    int threadId = t;

                    executorService.submit(() -> {
                        try {
                            List<Integer> bucket = buckets.get(threadId);
                            int i;
                            while ((i = vIndex.getAndIncrement()) < thisLevel.size()) {
                                int v = thisLevel.get(i);
                                for (int n : adjList[v]) {
                                    if (visited.compareAndSet(n, 0, 1)) {
                                        bucket.add(n);
                                    }
                                }
                            }
                        } finally {
                            latch.countDown();
                        }
                    });
                }

                latch.await();

                List<Integer> nextLevel = new ArrayList<>();
                for (List<Integer> b : buckets) nextLevel.addAll(b);

                startLevel = nextLevel;
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException(e);
        } finally {
            executorService.shutdownNow();
        }

        return visited;
    }

    //Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
